== Compilare per linux Raspberry 4
Nota che il Raspberry ? un sistema Linux ARM, quindi bisogna settare tutti i parametri
necessari per il cross compile.
Apri una nuova powershell e poi:
$env:GOOS = "linux"
$env:GOARCH="arm"
$env:GOARM="5"

go build -o live-omxctrl.bin
Con WLC si pu? controllare che il live-omxctrl.bin funzioni correttamente.

== Aggiornare il service
- Crea una nuova versione (cambio in idl.go)
- Crea il file live-omxctrl.bin per linux 
- Usa .\deploy -target pi4
- In WLC lancia ./copy_app_to_pi4.sh
- Su pi4: ./update-service.sh

== Deployment di pi4
Dal laptop si pu? aggiornare il service su pi4 usando lo script power shell
.\start_publish.ps1
Lo script attraverso il lancio di altri script locali, in bash e bash remoti 
riesce ad eseguire l`aggiornamento del service in modo completo senza usare direttamente WLC.


== Deployment dettagli e preparazione
- Sul laptop occorre il file copy_app_to_pi4.sh posizionato nella dir ../deployed
- Su Pi4 occorre la directory /home/igors/app/live-omxctrl con all` interno il file update-service.sh
cos? come la dir /home/igors/app/live-omxctrl/zips

Sul firewall ho aperto la porta 5548 in intranet con:
ufw allow from 192.168.2.0/24 to any port 5548

Ora va installata la app. Uso la dir:
~/app/go$mkdir live-omxctrl\zips
copio lo zip deployed locale in live-omxctrl\zips con ./copy_app_to_pi4.sh
copio ./update-service.sh in ~/app/go/live-omxctrl e lo lancio per scompattare lo zip nella dir ./current
Poi si va ./current e si prova il service con: ./live-omxctrl.bin

Poi si mette il programma live-omxctrl.bin come service di sistema.
sudo nano /lib/systemd/system/live-omxctrl.service

Abilitare il service:
sudo systemctl enable live-omxctrl.service
Ora si fa partire il service (resistente al reboot):
sudo systemctl start live-omxctrl
Per vedere i logs si usa:
sudo journalctl -f -u live-omxctrl

== Sviluppo su Pi4 
È possibile sviluppare il software direttamente su pi4 usando l'extension remote ssh
Basta installare su pi4 golang arm6. Il vantaggio, oltre al deployment ancora più semplice,
dovrebbe essere la possibilità di programmare direttamente dbus senza usare la shell.
Dbus su windows è molto diverso.
Per l'extension vuetojs non funziona su remoto in quanto ho impacchettato un tool in formato
windows. L'ho compilato separatamente e messo in /usr/local/bin/vuetojs.bin 
Per usarlo si scrive nella bash:
/usr/local/bin/vuetojs.bin -vue ./static/js/vue/views/dashboard.vue

== Dbus
Per comunicare con il processo omxplayer si usa il dbus con il suo protocollo.
Esiste già lo script bash che esegue i comandi, file bash/dbuscontrol.sh.
Esso setta 2 variabili di ambiente:
DBUS_SESSION_BUS_ADDRESS
DBUS_SESSION_BUS_PID
Poi lancia il comando specifico, per esempio per la duration:
dbus-send --print-reply=literal --session --reply-timeout=500 --dest=org.mpris.MediaPlayer2.omxplayer /org/mpris/MediaPlayer2 org.freedesktop.DBus.Properties.Get string:"org.mpris.MediaPlayer2.Player" string:"Duration"
Questa serie di comandi dovrebbe essere possibile in golang.
Ci sono due files legati all'utente:

/tmp/omxplayerdbus.igors => esempio unix:abstract=/tmp/dbus-1OTLRLIFgE,guid=39be549b2196c379ccdf29585ed9674d
Qui dovrebbe descritto quale socket ascolta il server, un socket del tipo abstract che sembra
un path del file di sistema ma non lo è

/tmp/omxplayerdbus.igors.pid  => esempio 1379
Questo dovrebbe essere il pid del service daemon dbus-daemon:
1 S  1001  1379     1  0  80   0 -  1604 do_epo ?        00:00:00 dbus-daemon

I due files /tmp/omxplayerdbus.igors vengono creati quando si fa partire il player.

== Deployment su arm direttamente
Questi sono gli step da eseguire:
go build -o live-omxctrl.bin
cd deploy
./deploy.bin -target pi4 -outdir ~/app/live-omxctrl/zips/
cd ~/app/live-omxctrl/
./update-service.sh

== Service Config
Questo il conetnuto del file che compare con:
sudo nano /lib/systemd/system/live-omxctrl.service
Poi si fa l'enable:
sudo systemctl enable live-omxctrl.service
E infine lo start:
sudo systemctl start live-omxctrl
Logs sono disponibili con:
sudo journalctl -f -u live-omxctrl

Qui segue il contenuto del file live-omxctrl.service
[Unit]
Description=live-omxctrl service
ConditionPathExists=/home/igors/app/live-omxctrl/current/live-omxctrl.bin
After=network.target

[Service]
Type=simple
User=igors
Group=igors
LimitNOFILE=1024

Restart=on-failure
RestartSec=10
startLimitIntervalSec=60

WorkingDirectory=/home/igors/app/live-omxctrl/current/
ExecStart=/home/igors/app/live-omxctrl/current/live-omxctrl.bin

# make sure log directory exists and owned by syslog
PermissionsStartOnly=true
ExecStartPre=/bin/mkdir -p /var/log/live-omxctrl
ExecStartPre=/bin/chown igors:igors /var/log/live-omxctrl
ExecStartPre=/bin/chmod 755 /var/log/live-omxctrl
StandardOutput=syslog
StandardError=syslog


